// To write a program to find frequent 2-itemset in given dataset for minimum support count =2.

#include <stdio.h>
#include <string.h>

#define MAX_TRANSACTIONS 100
#define MAX_ITEMS 10
#define MAX_ITEM_NAME_LENGTH 20

// Structure to store itemsets and their counts
typedef struct {
    char item1[MAX_ITEM_NAME_LENGTH];
    char item2[MAX_ITEM_NAME_LENGTH];
    int count;
} Itemset;

int main() {
    // Sample dataset: list of transactions
    char transactions[MAX_TRANSACTIONS][MAX_ITEMS][MAX_ITEM_NAME_LENGTH] = {
        {"milk", "bread", "butter"},
        {"bread", "diaper", "beer", "egg"},
        {"milk", "diaper", "beer", "cola"},
        {"milk", "bread", "diaper", "butter"},
        {"bread", "milk", "diaper", "beer"}
    };
    
    int num_transactions = 5; // Number of transactions
    Itemset itemsets[MAX_ITEMS * MAX_ITEMS]; // Store itemsets
    int itemset_count = 0; // Number of 2-itemsets
    int min_support_count = 2;

    // Step 1: Count occurrences of each 2-itemset
    for (int i = 0; i < num_transactions; i++) {
        for (int j = 0; j < MAX_ITEMS && strlen(transactions[i][j]) > 0; j++) {
            for (int k = j + 1; k < MAX_ITEMS && strlen(transactions[i][k]) > 0; k++) {
                // Create itemset
                Itemset new_itemset;
                strcpy(new_itemset.item1, transactions[i][j]);
                strcpy(new_itemset.item2, transactions[i][k]);
                new_itemset.count = 1;

                // Check if itemset already exists
                int found = 0;
                for (int l = 0; l < itemset_count; l++) {
                    if (strcmp(itemsets[l].item1, new_itemset.item1) == 0 &&
                        strcmp(itemsets[l].item2, new_itemset.item2) == 0) {
                        itemsets[l].count++;
                        found = 1;
                        break;
                    }
                }

                // If itemset does not exist, add it
                if (!found) {
                    itemsets[itemset_count++] = new_itemset;
                }
            }
        }
    }

    // Step 2: Print frequent itemsets
    printf("Frequent 2-itemsets with minimum support count of %d:\n", min_support_count);
    for (int i = 0; i < itemset_count; i++) {
        if (itemsets[i].count >= min_support_count) {
            printf("{%s, %s}: %d\n", itemsets[i].item1, itemsets[i].item2, itemsets[i].count);
        }
    }

    return 0;
}
Compilation and Execution
To compile and run this program:
1.	Save the code to a file named frequent_itemsets.c.
2.	Open a terminal and navigate to the directory where the file is located.
3.	Compile the program using:
gcc -o frequent_itemsets frequent_itemsets.c
4.	Run the program:
./frequent_itemsets

Output
When you run the program, it will display the frequent 2-itemsets along with their counts, based on the provided transactions. You can modify the transactions array to use your dataset.


// Experiment No. 08: Implementation of Clustering algorithm (K-means)

// Program:
#include <stdio.h>
#include <math.h>
#define MAX_POINTS 100
#define MAX_CLUSTERS 10
// Function to calculate the distance between two numbers
float distance(float a, float b) {
    return fabs(a - b);
}
// Function to assign each point to the nearest cluster
void assign_clusters(float points[], int num_points, float centroids[], int k, int clusters[]) {
    for (int i = 0; i < num_points; i++) {
        float min_dist = distance(points[i], centroids[0]);
        clusters[i] = 0;  // Assign to the first cluster initially
         for (int j = 1; j < k; j++) {
            float dist = distance(points[i], centroids[j]);
            if (dist < min_dist) {
                min_dist = dist;
                clusters[i] = j;  // Reassign to the closest cluster
            }
         } 
    }
}
// Function to update the centroids of clusters by calculating the mean of all points in each cluster
void update_centroids(float points[], int num_points, float centroids[], int k, int clusters[]) {
    float sum[MAX_CLUSTERS] = {0};
    int count[MAX_CLUSTERS] = {0};
 for (int i = 0; i < num_points; i++) {
        int cluster = clusters[i];
        sum[cluster] += points[i];
        count[cluster]++;
    }
     for (int j = 0; j < k; j++) {
        if (count[j] != 0) {
            centroids[j] = sum[j] / count[j];
        }
    }
}
// Function to check if the clusters have changed between iterations
int clusters_changed(int old_clusters[], int new_clusters[], int num_points) {
    for (int i = 0; i < num_points; i++) {
        if (old_clusters[i] != new_clusters[i]) {
            return 1;  // Clusters have changed
        }
    }
    return 0;  // Clusters have not change }
// Function to print the current state of clusters and centroids in each iteration
void print_clusters(float points[], int num_points, int clusters[], float centroids[], int k, int iteration) {
    printf("\nClusters after iteration %d:\n", iteration);
    for (int j = 0; j < k; j++) {
        printf("Cluster %d: ", j);
        for (int i = 0; i < num_points; i++) {
            if (clusters[i] == j) {
                printf("%.2f ", points[i]);
            }    }
        printf("\n");
    } // Print centroids (means) after each iteration
    printf("Centroids after iteration %d:\n", iteration);
    for (int j = 0; j < k; j++) {
        printf("Centroid %d -> %.2f\n", j, centroids[j]);
    }
}
// Function to print the final clusters in a single line format
void print_final_clusters(float points[], int num_points, int clusters[], int k) {
    printf("\nFinal Clusters:\n");
    for (int j = 0; j < k; j++) {
        printf("Cluster %d -> ", j);
        int first = 1;
        for (int i = 0; i < num_points; i++) {
            if (clusters[i] == j) {
                if (!first) {
                    printf(", ");
                }
                printf("%.2f", points[i]);
                first = 0;
            }
        }
        printf("\n");
    }
}
int main() {
    int num_points, k;
    float points[MAX_POINTS], centroids[MAX_CLUSTERS];
    int clusters[MAX_POINTS], old_clusters[MAX_POINTS];

    // Input number of points
    printf("Enter the number of points: ");
    scanf("%d", &num_points);
    // Input points
    printf("Enter the points:\n");
    for (int i = 0; i < num_points; i++) {
        scanf("%f", &points[i]);
    }
  // Input number of clusters
    printf("Enter the number of clusters: ");
    scanf("%d", &k);
  // Input initial centroids   printf("Enter the initial centroids:\n");
    for (int i = 0; i < k; i++) {
        scanf("%f", &centroids[i]);
    }
  // Initialize clusters and old_clusters arrays
    for (int i = 0; i < num_points; i++) {
        clusters[i] = -1;
        old_clusters[i] = -1;
    }
  // k-means clustering iterations
    int iterations = 0;
    do {
        // Assign points to the nearest clusters
        assign_clusters(points, num_points, centroids, k, clusters);
        print_clusters(points, num_points, clusters, centroids, k, iterations);
        update_centroids(points, num_points, centroids, k, clusters);
        if (!clusters_changed(old_clusters, clusters, num_points)) {
            break;
        } // Copy current clusters to old_clusters for the next iteration comparison
for (int i = 0; i < num_points; i++) {
            old_clusters[i] = clusters[i];
        }
           iterations++;
    } while (1);
    print_final_clusters(points, num_points, clusters, k);
// Output final centroids
    printf("\nFinal Centroids:\n");
    for (int i = 0; i < k; i++) {
        printf("Centroid %d -> %.2f\n", i, centroids[i]);
    } return 0;
}
